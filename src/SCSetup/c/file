/* --------------------------------------------------------------------------- *
 * Filename  : scbuilder/file.c                                                *
 * Purpose   :                                                                 *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */


/* --------------------------------------------------------------------------- *
 * Includes                                                                    *
 * --------------------------------------------------------------------------- */
#include "scsetup/file.h"
#include "scsetup/core.h"
#include "scsetup/event.h"

#include "shared/utilities.h"

#include "DeskLib:EventMsg.h"
#include "DeskLib:Icon.h"
#include "DeskLib:Msgs.h"
#include "DeskLib:Mem.h"
#include "DeskLib:WimpSWIs.h"


/* --------------------------------------------------------------------------- *
 * Procedure : SCEdit_OP1_SetIcons                                             *
 * Purpose   : Update icons in the 'Open file / dir / App' dialog.             *
 * Status    : Implementation (V1.0.1)                                         *
 * V1.0.1    : 24/11/1999 - Update - Now uses generic leaf name code.          *
 * V1.0.0    : 07/11/1999 - Preliminary implementation.                        *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
void SCEdit_OP1_SetIcons(window_handle window, char *filename)
{
  db_fn_begin();

  Icon_SetText (window, SD_file_filename, filename);
  Icon_SetText (window, SD_file_label,    SCEdit_FindLeafName(filename));

  db_fn_end();


  return;
}


/* --------------------------------------------------------------------------- *
 * Procedure : SCOP1_DataLoad                                                  *
 * Purpose   : Process files dragged to the 'Open file / dir / App' dialog.    *
 * Status    : Implementation (V1.0.1)                                         *
 * V1.0.1    : 07/11/1999 - Update - Now uses standard icon writer.            *
 * V1.0.0    : 06/11/1999 - Preliminary implementation.                        *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
BOOL SCOP1_DataLoad (event_pollblock *event, void *reference)
{
  db_fn_begin();

  SCEdit_OP1_SetIcons (event->data.message.data.dataload.window,
                       event->data.message.data.dataload.filename);

  db_fn_end();


  return TRUE;
}


/* --------------------------------------------------------------------------- *
 * Procedure : SCEdit_AddFile                                                  *
 * Purpose   : Add an icon for a file to the shortcuts builder window.         *
 * Status    : Implementation (V1.1.0)                                         *
 * V1.1.0    : 05/12/1999 - Recode - Now uses DeskLib 'Mem' functions.         *
 * V1.0.1    : 11/11/1999 - Update - Now returns icon width.                   *
 * V1.0.0    : 06/11/1999 - Preliminary implementation.                        *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
void SCEdit_AddFile(int x, int yPos, shortcuts_menu *item)
{
  icon_createblock *icondata;
  icon_handle       icon = NULL;
  BOOL              shrunk,
                    shaded;


  db_fn_begin();

  icondata = malloc (sizeof(icon_createblock));

  XUtil_CalculateFileIcon (&item->shortcut.file,
                           &icondata->icondata.data.indirecttext.buffer,
                           &icondata->icondata.data.indirecttext.validstring,
                           &icondata->icondata.data.indirecttext.bufflen,
                           &shrunk,
                           &shaded);

  icondata->window                       = scwin_main;
  icondata->icondata.flags.value         = menuIconFlags;
  icondata->icondata.flags.data.halfsize = shrunk;
  icondata->icondata.flags.data.shaded   = 0;  /* Ensure we don't shade things! */
  icondata->icondata.workarearect.min.x  = 32;
  icondata->icondata.workarearect.min.y  = -yPos - menuIconHeight;
  icondata->icondata.workarearect.max.x  = x + 80;
  icondata->icondata.workarearect.max.y  = -yPos;

  Wimp_CreateIcon (icondata, &icon);

  db_fn_end();


  return;
}


/* --------------------------------------------------------------------------- *
 * Procedure : SCOK1                                                           *
 * Purpose   : 'OK' clicked in 'Open file / dir / app' dialog.                 *
 * Status    : Implementation (V1.0.3)                                         *
 * V1.0.3    : 26/05/2001 - Bugfix - Memory freeing code fixed.                *
 * V1.0.2    : 13/02/2000 - Update - Added 'events' support.                   *
 * V1.0.1    : 11/12/1999 - Update - Now supports 'rule-off'.                  *
 * V1.0.0    : 06/11/1999 - Preliminary implementation.                        *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
void SCOK1(dialog2_block *aDialog)
{
  shortcuts_menu *aShortcut;
  mouse_block     ptr;


  db_fn_begin();

  /* Close the event handler dialog if it's open */
  Wimp_GetPointerInfo(&ptr);
  if (!ptr.button.data.adjust)  eventsDialog_Dispose();

  if (aDialog->reference != NULL)  aShortcut = (shortcuts_menu *)aDialog->reference;
  else                             aShortcut = SCEdit_FindNewShortcut (NULL, NULL);
  aShortcut->entry    = file;
  aShortcut->ruledOff = Icon_GetSelect(aDialog->window, SD_file_ruleoff);

  if (aDialog->reference != NULL)
    free (aShortcut->shortcut.file.label);
  aShortcut->shortcut.file.label = malloc (strlen(Icon_GetTextPtr(aDialog->window, SD_file_label))+1);
  strcpy     (aShortcut->shortcut.file.label, Icon_GetTextPtr(aDialog->window, SD_file_label));

  if (aDialog->reference != NULL)
    free (aShortcut->shortcut.file.fileName);
  aShortcut->shortcut.file.fileName = malloc (strlen(Icon_GetTextPtr(aDialog->window, SD_file_filename))+1);
  strcpy     (aShortcut->shortcut.file.fileName, Icon_GetTextPtr(aDialog->window,SD_file_filename));

  SCEdit_RefreshWindow();

  db_fn_end();


  return;
}


/* --------------------------------------------------------------------------- *
 * Procedure : SB_File_EWH                                                     *
 * Purpose   : .                                                               *
 * Status    : Implementation (V1.0.0)                                         *
 * V1.0.0    : 06/11/1999 - Preliminary implementation.                        *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
BOOL SB_File_EWH (event_pollblock *event, void *reference)
{
  BOOL rval;


  db_fn_begin();

  if (reference == NULL)
    rval = SCEdit_EWH (event, SD_file_Edit, SD_file_Attach, SD_file_Cancel, none, NULL);
  else
    rval = SCEdit_EWH (event, SD_file_Edit, SD_file_Attach, SD_file_Cancel,
                       &((shortcuts_menu *)reference)->e_type,
                       &((shortcuts_menu *)reference)->event.data);

  db_fn_end();


  return rval;
}


/* --------------------------------------------------------------------------- *
 * Procedure : SCOP1                                                           *
 * Purpose   : Open the 'Open file / dir / App' dialog.                        *
 * Status    : Implementation (V1.0.3)                                         *
 * V1.0.3    : 13/02/2000 - Update - Added 'events' support.                   *
 * V1.0.2    : 11/12/1999 - Update - Now supports 'rule-off'.                  *
 * V1.0.1    : 28/11/1999 - Update - No longer uses a temporary array.         *
 * V1.0.0    : 06/11/1999 - Preliminary implementation.                        *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
void SCOP1(dialog2_block *aDialog)
{
  shortcuts_menu *next;


  db_fn_begin();

  if (aDialog->reference != NULL)  /* Update */
  {
    next = (shortcuts_menu *)aDialog->reference;
    Icon_SetSelect (aDialog->window, SD_file_ruleoff,  next->ruledOff);
    Icon_SetShade  (aDialog->window, SD_file_Edit,     next->e_type == none ? 1 : 0);
    Icon_SetSelect (aDialog->window, SD_file_Attach,   next->e_type == none ? 0 : 1);
    Icon_SetText   (aDialog->window, SD_file_label,    next->shortcut.file.label);
    Icon_SetText   (aDialog->window, SD_file_filename, next->shortcut.file.fileName);
  }
  else  /* Create */
  {
    next = NULL;
    Icon_Deselect  (aDialog->window, SD_file_ruleoff);
    Icon_Shade     (aDialog->window, SD_file_Edit);
    Icon_Deselect  (aDialog->window, SD_file_Attach);
    Msgs_Lookup    ("shct.file00", Icon_GetTextPtr(aDialog->window,    SD_file_label), 255);
    Msgs_Lookup    ("shct.file01", Icon_GetTextPtr(aDialog->window, SD_file_filename), 255);
  }

  EventMsg_Claim   (message_DATALOAD, aDialog->window, SCOP1_DataLoad, NULL);
  Event_Claim      (event_CLICK, aDialog->window, SD_file_Cancel, SB_File_EWH, (void *) next);
  Event_Claim      (event_CLICK, aDialog->window, SD_file_Attach, SB_File_EWH, (void *) next);
  Event_Claim      (event_CLICK, aDialog->window, SD_file_Edit,   SB_File_EWH, (void *) next);

  db_fn_end();


  return;
}


/* --------------------------------------------------------------------------- *
 * Procedure :                                                                 *
 * Purpose   :                                                                 *
 * Status    : Development                                                     *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
void SB_File_MainWinDrag (BOOL showDialog, event_pollblock *event)
{
  shortcuts_menu *aShortcut;
  char           *leafname;


  db_fn_begin();

  if (showDialog)
  {
    if (shortcutDialog != NULL)  Dialog2_DeleteDialog (shortcutDialog);
    shortcutDialog = Dialog2_CreateDialogBlock ("sfile", SD_file_OK, SD_file_Cancel,
                                                NULL, SCOK1, NULL);
    Dialog2_OpenDialogStatic (shortcutDialog, open_CENTEREDUNDERPOINTER);
    EventMsg_Claim           (message_DATALOAD, shortcutDialog->window, SCOP1_DataLoad, NULL);
    Icon_Deselect            (shortcutDialog->window, SD_file_ruleoff);
    SCEdit_OP1_SetIcons      (shortcutDialog->window, event->data.message.data.dataload.filename);
  }
  else
  {
    aShortcut           = SCEdit_FindNewShortcut (NULL, NULL);
    aShortcut->entry    = file;
    aShortcut->ruledOff = FALSE;

    aShortcut->shortcut.file.fileName = malloc (strlen(event->data.message.data.dataload.filename)+1);
    strcpy    (aShortcut->shortcut.file.fileName, event->data.message.data.dataload.filename);

    leafname = SCEdit_FindLeafName(aShortcut->shortcut.file.fileName);
    aShortcut->shortcut.file.label = malloc (strlen(leafname)+1);
    strcpy    (aShortcut->shortcut.file.label, leafname);

    SCEdit_RefreshWindow();
  }

  db_fn_end();


  return;
}

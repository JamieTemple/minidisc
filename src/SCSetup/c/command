/* --------------------------------------------------------------------------- *
 * Filename  : scbuilder/sb-cmnd.c                                             *
 * Purpose   :                                                                 *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */


/* --------------------------------------------------------------------------- *
 * Includes                                                                    *
 * --------------------------------------------------------------------------- */
#include "scsetup/command.h"
#include "scsetup/core.h"
#include "scsetup/event.h"

#include "DeskLib:Event.h"
#include "DeskLib:EventMsg.h"
#include "DeskLib:Icon.h"
#include "DeskLib:Mem.h"
#include "DeskLib:Msgs.h"
#include "DeskLib:Mem.h"
#include "DeskLib:Wimp.h"
#include "DeskLib:WimpSWIs.h"


/* --------------------------------------------------------------------------- *
 * Procedure : SCEdit_AddCmnd                                                  *
 * Purpose   : Add an icon for a command to the shortcuts builder window.      *
 * Status    : Implementation (V1.1.1)                                         *
 * V1.1.1    : 21/06/2002 - Update - Now uses 'md!scmd01' sprite.              *
 * V1.1.0    : 05/12/1999 - Recode - Now uses DeskLib 'Mem' functions.         *
 * V1.0.1    : 11/11/1999 - Update - Now returns icon width.                   *
 * V1.0.0    : 06/11/1999 - Preliminary implementation.                        *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
void SCEdit_AddCmnd(int x, int yPos, shortcuts_menu *item)
{
  icon_createblock *icondata;
  icon_handle       icon = NULL;
  int               bufflen;


  db_fn_begin();

  icondata = malloc (sizeof(icon_createblock));

  icondata->window                             = scwin_main;
  icondata->icondata.flags.value               = menuIconFlags;
  bufflen                                      = strlen(item->shortcut.command.label) + 1;
  icondata->icondata.data.indirecttext.bufflen = bufflen;

  icondata->icondata.data.indirecttext.buffer      = malloc (bufflen);
  icondata->icondata.data.indirecttext.validstring = malloc (11);
  strcpy             (icondata->icondata.data.indirecttext.buffer, item->shortcut.command.label);
  strcpy             (icondata->icondata.data.indirecttext.validstring, "smd!scmd01");
  icondata->icondata.workarearect.min.x = 32;
  icondata->icondata.workarearect.min.y = -yPos - menuIconHeight;
  icondata->icondata.workarearect.max.x = x + 80;
  icondata->icondata.workarearect.max.y = -yPos;
  Wimp_CreateIcon (icondata, &icon);

  db_fn_end();


  return;
}


/* --------------------------------------------------------------------------- *
 * Procedure : SCOK0                                                           *
 * Purpose   : 'OK' clicked in 'Execute Command' dialog.                       *
 * Status    : Implementation (V1.0.3)                                         *
 * V1.0.3    : 26/05/2001 - Bugfix - Memory freeing code fixed.                *
 * V1.0.2    : 13/02/2000 - Update - Added 'events' support.                   *
 * V1.0.1    : 11/12/1999 - Update - Now supports 'rule-off'.                  *
 * V1.0.0    : 06/11/1999 - Preliminary implementation.                        *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
void SCOK0 (dialog2_block *aDialog)
{
  shortcuts_menu *aShortcut;
  mouse_block     ptr;


  db_fn_begin();

  /* Close the event handler dialog if it's open */
  Wimp_GetPointerInfo(&ptr);
  if (!ptr.button.data.adjust)  eventsDialog_Dispose();

  if (aDialog->reference != NULL)  aShortcut = (shortcuts_menu *)aDialog->reference;
  else                             aShortcut = SCEdit_FindNewShortcut (NULL, NULL);
  aShortcut->entry    = command;
  aShortcut->ruledOff = Icon_GetSelect(aDialog->window, SD_cmnd_ruleoff);

  if (aDialog->reference != NULL)
    free (aShortcut->shortcut.command.label);
  aShortcut->shortcut.command.label=malloc(strlen(Icon_GetTextPtr(aDialog->window,SD_cmnd_label))+1);
  strcpy (aShortcut->shortcut.command.label, Icon_GetTextPtr(aDialog->window, SD_cmnd_label));

  if (aDialog->reference != NULL)
    free (aShortcut->shortcut.command.command);
  aShortcut->shortcut.command.command = malloc (
                                      strlen(Icon_GetTextPtr(aDialog->window, SD_cmnd_command))+1);
  strcpy (aShortcut->shortcut.command.command,Icon_GetTextPtr(aDialog->window,SD_cmnd_command));

  SCEdit_RefreshWindow();

  db_fn_end();


  return;
}


/* --------------------------------------------------------------------------- *
 * Procedure : SB_Cmnd_DialogDrag                                              *
 * Purpose   : Process files dragged to the 'Execute a command' dialog box.    *
 * Status    : Implementation (V1.0.0)                                         *
 * V1.0.0    : 14/12/1999 - Preliminary implementation.                        *
 * Status    : Development                                                     *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
BOOL SB_Cmnd_DialogDrag (event_pollblock *event, void *reference)
{
  char          *filename = event->data.message.data.dataload.filename;
  window_handle  window   = event->data.message.data.dataload.window;
  int            i;


  db_fn_begin();

  for (i = strlen(filename); filename[i] != '.' && filename[i] != ':'; i--);

  if (filename[i+1] == '!') i++;

  Icon_SetText (window, SD_cmnd_label, filename + i + 1);
  sprintf      (Icon_GetTextPtr(window, SD_cmnd_command), "Filer_Run %s", filename);

  Icon_ForceRedraw(event->data.message.data.dataload.window, SD_cmnd_label);
  Icon_ForceRedraw(event->data.message.data.dataload.window, SD_cmnd_command);

  db_fn_end();


  return TRUE;
}


/* --------------------------------------------------------------------------- *
 * Procedure : SB_Cmnd_EWH                                                     *
 * Purpose   : .                                                               *
 * Status    : Implementation (V1.0.0)                                         *
 * V1.0.0    : 06/11/1999 - Preliminary implementation.                        *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
BOOL SB_Cmnd_EWH (event_pollblock *event, void *reference)
{
  BOOL rval;


  db_fn_begin();

  if (reference == NULL)
    rval = SCEdit_EWH (event, SD_cmnd_Edit, SD_cmnd_Attach, SD_cmnd_Cancel, none, NULL);
  else
    rval = SCEdit_EWH (event, SD_cmnd_Edit, SD_cmnd_Attach, SD_cmnd_Cancel,
                       &((shortcuts_menu *)reference)->e_type,
                       &((shortcuts_menu *)reference)->event.data);

  db_fn_end();


  return rval;
}


/* --------------------------------------------------------------------------- *
 * Procedure : SCOP0                                                           *
 * Purpose   : Open the 'Execute command' dialog.                              *
 * Status    : Implementation (V1.0.4)                                         *
 * V1.0.4    : 13/02/2000 - Update - Added 'events' support.                   *
 * V1.0.3    : 14/12/1999 - Update - Added a dataload handler.                 *
 * V1.0.2    : 11/12/1999 - Update - Now supports 'rule-off'.                  *
 * V1.0.1    : 28/11/1999 - Update - No longer uses a temporary array.         *
 * V1.0.0    : 06/11/1999 - Preliminary implementation.                        *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
void SCOP0(dialog2_block *aDialog)
{
  shortcuts_menu *next;


  db_fn_begin();

  if (aDialog->reference != NULL)  /* Update */
  {
    next = (shortcuts_menu *)aDialog->reference;
    Icon_SetSelect (aDialog->window, SD_cmnd_ruleoff, next->ruledOff);
    Icon_SetShade  (aDialog->window, SD_cmnd_Edit,    next->e_type == none ? 1 : 0);
    Icon_SetSelect (aDialog->window, SD_cmnd_Attach,  next->e_type == none ? 0 : 1);
    Icon_SetText   (aDialog->window, SD_cmnd_label,   next->shortcut.command.label);
    Icon_SetText   (aDialog->window, SD_cmnd_command, next->shortcut.command.command);
  }
  else                             /* Create */
  {
    next = NULL;
    Icon_Deselect  (aDialog->window, SD_cmnd_ruleoff);
    Icon_Shade     (aDialog->window, SD_cmnd_Edit);
    Icon_Deselect  (aDialog->window, SD_cmnd_Attach);
    Msgs_Lookup    ("shct.cmnd00", Icon_GetTextPtr(aDialog->window,   SD_cmnd_label), 255);
    Msgs_Lookup    ("shct.cmnd01", Icon_GetTextPtr(aDialog->window, SD_cmnd_command), 255);
  }

  EventMsg_Claim   (message_DATALOAD, aDialog->window, SB_Cmnd_DialogDrag, NULL);
  Event_Claim      (event_CLICK, aDialog->window, SD_cmnd_Cancel, SB_Cmnd_EWH, (void *) next);
  Event_Claim      (event_CLICK, aDialog->window, SD_cmnd_Attach, SB_Cmnd_EWH, (void *) next);
  Event_Claim      (event_CLICK, aDialog->window, SD_cmnd_Edit,   SB_Cmnd_EWH, (void *) next);

  db_fn_end();


  return;
}



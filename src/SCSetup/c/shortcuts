/* --------------------------------------------------------------------------- *
 * Filename  : scbuilder/shortcuts.c                                           *
 * Purpose   :                                                                 *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */


/* --------------------------------------------------------------------------- *
 * Includes                                                                    *
 * --------------------------------------------------------------------------- */
#include "scsetup/shortcuts.h"
#include "scsetup/core.h"

#include "DeskLib:Event.h"
#include "DeskLib:EventMsg.h"
#include "DeskLib:Icon.h"
#include "DeskLib:Menu.h"
#include "DeskLib:Msgs.h"
#include "DeskLib:Mem.h"
#include "DeskLib:Wimp.h"
#include "DeskLib:WimpSWIs.h"


/* --------------------------------------------------------------------------- *
 * Procedure : SCEdit_AddMenu                                                  *
 * Purpose   : Add an icon for a shortcuts sub-menu to the shortcuts builder   *
 *             window.                                                         *
 * Status    : Implementation (V1.1.0)                                         *
 * V1.1.0    : 05/12/1999 - Recode - Now uses DeskLib 'Mem' functions.         *
 * V1.0.1    : 11/11/1999 - Update - Now returns icon width.                   *
 * V1.0.0    : 06/11/1999 - Preliminary implementation.                        *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
void SCEdit_AddMenu(int x, int yPos, shortcuts_menu *item)
{
  icon_createblock *icondata;
  icon_handle       icon     = NULL;
  int               bufflen;


  db_fn_begin();

  icondata = malloc (sizeof(icon_createblock));

  icondata->window                             = scwin_main;
  icondata->icondata.flags.value               = menuIconFlags;
  bufflen                                      = strlen(item->shortcut.menu.label) + 1;
  icondata->icondata.data.indirecttext.bufflen = bufflen;

  icondata->icondata.data.indirecttext.buffer      = malloc (bufflen);
  icondata->icondata.data.indirecttext.validstring = malloc (10);
  strcpy             (icondata->icondata.data.indirecttext.buffer, item->shortcut.menu.label);
  strcpy             (icondata->icondata.data.indirecttext.validstring, "smd!smenu");
  icondata->icondata.workarearect.min.x = 32;
  icondata->icondata.workarearect.min.y = -yPos - menuIconHeight;
  icondata->icondata.workarearect.max.x = x + 80;
  icondata->icondata.workarearect.max.y = -yPos;
  Wimp_CreateIcon (icondata, &icon);

  db_fn_end();


  return;
}


/* --------------------------------------------------------------------------- *
 * Procedure : SCOK4                                                           *
 * Purpose   : 'OK' clicked in 'Shortcuts menu' dialog.                        *
 * Status    : Implementation (V1.0.2)                                         *
 * V1.0.2    : 26/05/2001 - Bugfix - Memory freeing code fixed.                *
 * V1.0.1    : 11/12/1999 - Update - Now supports 'rule-off'.                  *
 * V1.0.0    : 06/11/1999 - Preliminary implementation.                        *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
void SCOK4(dialog2_block *aDialog)
{
  shortcuts_menu *aShortcut;


  db_fn_begin();

  if (aDialog->reference != NULL)  aShortcut = (shortcuts_menu *)aDialog->reference;
  else                             aShortcut = SCEdit_FindNewShortcut (NULL, NULL);
  aShortcut->entry    = menu;
  aShortcut->ruledOff = Icon_GetSelect(aDialog->window, SD_menu_ruleoff);

  if (aDialog->reference != NULL)
    free (aShortcut->shortcut.menu.label);
  aShortcut->shortcut.menu.label = malloc (strlen(Icon_GetTextPtr(aDialog->window, SD_menu_label))+1);
  strcpy     (aShortcut->shortcut.menu.label, Icon_GetTextPtr(aDialog->window, SD_menu_label));

  if (aDialog->reference != NULL)
    free (aShortcut->shortcut.menu.intMenuName);
  aShortcut->shortcut.menu.intMenuName = malloc (strlen(Icon_GetTextPtr(aDialog->window, SD_menu_realmenu))+1);
  strcpy (aShortcut->shortcut.menu.intMenuName, Icon_GetTextPtr(aDialog->window, SD_menu_realmenu));

  SCEdit_RefreshWindow();

  db_fn_end();


  return;
}


/* --------------------------------------------------------------------------- *
 * Procedure : SCEdit_OP4_MenuSelected                                         *
 * Purpose   : Process clicks in the 'Shortcuts menu' menu in 'New shortcuts'  *
 *             dialog.                                                         *
 * Status    : Implementation (V1.0.0)                                         *
 * V1.0.0    : 07/11/1999 - Preliminary implementation.                        *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
BOOL SCEdit_OP4_MenuSelected (event_pollblock *event, void *reference)
{
  mouse_block  ptr;


  db_fn_begin();

  Icon_SetText (event->data.mouse.window,
                SD_menu_realmenu,
                shortcutsArray[event->data.selection[0]].menuName);

  Icon_SetText (event->data.mouse.window,
                SD_menu_label,
                shortcutsArray[event->data.selection[0]].menuName);

  Wimp_GetPointerInfo (&ptr);

  if (ptr.button.data.adjust) Menu_ShowLast ();

  db_fn_end();


  return TRUE;
}


/* --------------------------------------------------------------------------- *
 * Procedure : SCEdit_OP4_Menu                                                 *
 * Purpose   : Build a menu of shortcuts menus to choose from.                 *
 * Status    : Implementation (V1.0.1)                                         *
 * V1.0.1    : 28/11/1999 - Update - Dumped static menu text array, now builds *
 *                          menu on-the-fly.                                   *
 * V1.0.0    : 07/11/1999 - Preliminary implementation.                        *
 * Notes     :                                                                 *
 * --------------------------------------------------------------------------- */
BOOL SCEdit_OP4_Menu (event_pollblock *event, void *reference)
{
  menu_ptr  aMenu     = NULL;
  int       menuEntry = 0,
            i;
  char      menuTitle[20];


  db_fn_begin();

  for (i = 0; i < maximumNumberOfShortcuts; i++)
  {
    if (strlen(shortcutsArray[i].menuName) != 0)
    {
      if (aMenu == NULL)
      {
        Msgs_Lookup ("conf.actn05", menuTitle, 19);
        aMenu = Menu_New(menuTitle, shortcutsArray[i].menuName);
      }
      else  aMenu = Menu_Extend(aMenu, shortcutsArray[i].menuName);
      if (strcmp(currentShortcutsMenu->menuName, shortcutsArray[i].menuName) == 0) menuEntry = i;
    }
  }

  Menu_SetFlags (aMenu, menuEntry, 0, 1); /* Shade current menu (avoid direct recursion) */
  Event_Claim   (event_MENU, event_ANY, event_ANY, SCEdit_OP4_MenuSelected, NULL);
  Menu_PopUp    (aMenu, event->data.mouse.window, event->data.mouse.icon);

  db_fn_end();


  return TRUE;
}


/* --------------------------------------------------------------------------- *
 * Procedure : SCOP4                                                           *
 * Purpose   : Open the 'Shortcuts menu' dialog.                               *
 * Status    : Implementation (V1.0.3)                                         *
 * V1.0.3    : 11/12/1999 - Update - Now supports 'rule-off'.                  *
 * V1.0.2    : 28/11/1999 - Update - No longer uses a temporary array.         *
 * V1.0.1    : 07/11/1999 - Update - Now includes menu selector handler.       *
 * V1.0.0    : 06/11/1999 - Preliminary implementation.                        *
 * Notes     : We need to make sure that we don't generate a directly          *
 *             recursive entry here. (Shortcuts with a Shortcuts entry!)       *
 * --------------------------------------------------------------------------- */
void SCOP4(dialog2_block *aDialog)
{
  shortcuts_menu *next;


  db_fn_begin();

  if (aDialog->reference != NULL)  /* Update */
  {
    next = (shortcuts_menu *)aDialog->reference;
    Icon_SetSelect (aDialog->window, SD_menu_ruleoff,  next->ruledOff);
    Icon_SetText   (aDialog->window, SD_menu_label,    next->shortcut.menu.label);
    Icon_SetText   (aDialog->window, SD_menu_realmenu, next->shortcut.menu.intMenuName);
  }
  else                             /* Create */
  {
    Icon_Deselect  (aDialog->window, SD_menu_ruleoff);
    Msgs_Lookup    ("shct.menu00",   Icon_GetTextPtr(aDialog->window,    SD_menu_label), 255);
    Msgs_Lookup    ("menu.shortcut", Icon_GetTextPtr(aDialog->window, SD_menu_realmenu), 255);
  }

  Event_Claim      (event_CLICK, aDialog->window, SD_menu_selector, SCEdit_OP4_Menu, NULL);

  db_fn_end();


  return;
}



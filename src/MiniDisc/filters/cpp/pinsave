/*
--------------------------------------------------------------------------------

   $Source: /ADFS::4/\044/Shared/unix/cvs/minidisc/Sourcecode/MiniDisc/filters/pinsave.cpp,v $

   $Revision: 1.3 $
   $Date: 2004/04/14 14:44:14 $

   Manage DataSave messages sent to the pinboard.

--------------------------------------------------------------------------------
*/



/*
--------------------------------------------------------------------------------
   Includes
--------------------------------------------------------------------------------
*/
#include "shared/global.h"

#ifdef __cplusplus
   extern "C" {
#endif

#include "shared/utilities.h"

#include "DeskLib:Event.h"
#include "DeskLib:EventMsg.h"
#include "DeskLib:Wimp.h"
#include "DeskLib:WimpSWIs.h"



/*
--------------------------------------------------------------------------------
   Local rich data definitions.
--------------------------------------------------------------------------------
*/
typedef struct
{
  char        *leafname;
  task_handle  fa_task_handle;
  int          xpos;
  int          ypos;
} pinsaveinfo;



/*
--------------------------------------------------------------------------------
   (Local) Global Variables
--------------------------------------------------------------------------------
*/
static BOOL  PinSave_Activated = FALSE;



/*
--------------------------------------------------------------------------------
   Procedure : MDFilters_PinboardSavePin
   Purpose   : Pins the file to the backdrop after the FilerAction task quits.
   Status    : Implementation (V1.0.1)
   V1.0.1    : 22/11/2003 - Update - Made compatible with all versions of RO.
   V1.0.0    : 24/05/2002 - Preliminary implementation.
   Notes     :
--------------------------------------------------------------------------------
*/
BOOL MDFilters_PinboardSavePin (event_pollblock *event, void *reference)
{
  char *pinCommand = NULL;  /* Assign a value to supress compiler warnings. */


  if (event->data.message.header.sender != ((pinsaveinfo *)reference)->fa_task_handle)
    return TRUE;

  /* Allocate (approximately) enough space for the 'pin' command string. */
  pinCommand = malloc(24 + strlen(((pinsaveinfo *)reference)->leafname) + 11);

  /* Create, then call the command to pin the file to the pinboard. */
  sprintf(pinCommand, "Pin <MiniDisc$Desktop>.%s %d %d", ((pinsaveinfo *)reference)->leafname,
          ((pinsaveinfo *)reference)->xpos, ((pinsaveinfo *)reference)->ypos);

  Wimp_StartTask(pinCommand);  // Note: Ignore any errors that may occur.

  /* Free up everything that we've used. */
  EventMsg_Release (message_TASKCLOSEDOWN, event_ANY, MDFilters_PinboardSavePin);

  free (((pinsaveinfo *)reference)->leafname);
  free (reference);
  free (pinCommand);


  return TRUE;
}


/*
--------------------------------------------------------------------------------
   Procedure : MDFilters_PinboardSave
   Purpose   : Move a file saved to the pinboard into the MiniDisc desktop dir
   Status    : Implementation (V1.0.0)
   V1.0.0    : 06/05/2002 - Preliminary implementation.
   Notes     : We need to do things like this, as we're not allowed to start a
               WIMP task from within the Filter handling code.
--------------------------------------------------------------------------------
*/
BOOL MD_PinSave_Message (event_pollblock *event, void *reference)
{
  _kernel_swi_regs  regs;
  task_handle       newtask;
  _kernel_oserror  *anError;
  char              expandedPath[buffer_size];
  int               i;
  pinsaveinfo      *pSaveData;


  db->fn_begin();

  /* Expand path... */
  regs.r[0] = 37;
  regs.r[1] = (int)event->data.message.data.dataload.filename;
  regs.r[2] = (int)expandedPath;
  regs.r[3] = 0;
  regs.r[4] = (int)"$";
  regs.r[5] = buffer_size;
  anError   = _kernel_swi(0x20029, &regs, &regs);

  /* Find last '.' in path name */
  for (i = strlen(expandedPath); expandedPath[i] != '.'; i--);

  /* Split path / leafname */
  expandedPath[i] = 0;

  /* Start a filer-action task */
  Wimp_StartTask3("Filer_Action", &newtask);

  /* Build and populate the Pinboard save info block */
  pSaveData           = (pinsaveinfo *) malloc(sizeof(pinsaveinfo));
  pSaveData->leafname = malloc(strlen(expandedPath+i+1) + 1);
  strcpy(pSaveData->leafname, expandedPath+i+1);

  pSaveData->fa_task_handle = newtask;
  pSaveData->xpos           = event->data.message.data.dataload.pos.x;
  pSaveData->ypos           = event->data.message.data.dataload.pos.y;

  /* Do 'SendSelectedDirectory' */
  regs.r[0] = newtask;
  regs.r[1] = (int)expandedPath;
  anError   = _kernel_swi(0x60f80, &regs, &regs);

  /* Do 'SendSelectedFile' */
  regs.r[0] = newtask;
  regs.r[1] = (int)expandedPath+i+1;
  anError   = _kernel_swi(0x60f81, &regs, &regs);

  /* Do send start opertation... */
  regs.r[0] = newtask;
  regs.r[1] = 6;  /* Move */
  regs.r[2] = 0;
  regs.r[3] = (int)"<MiniDisc$Desktop>";
  regs.r[4] = strlen("<MiniDisc$Desktop>")+1;
  anError = _kernel_swi(0x60f82, &regs, &regs);

  /* Claim task quit messages, so that we know when to pin the file. */
  EventMsg_Claim(message_TASKCLOSEDOWN, event_ANY, MDFilters_PinboardSavePin, (void *)pSaveData);

  UNUSED(reference);

  db->fn_end();


  return TRUE;
}


/*
--------------------------------------------------------------------------------
   Procedure : MDFilters_PinSave_DataSave
   Purpose   :
   Status    : Implementation (V1.0.0)
   V1.0.0    : 15/05/2002 - Preliminary implementation.
   Notes     :
--------------------------------------------------------------------------------
*/
int MDFilters_PinSave_DataSave(event_data *block, _kernel_swi_regs *r)
{
  _kernel_swi_regs  regs;
  message_block     message;
  _kernel_oserror  *anError;
  char              expandedPath[buffer_size];


  if (block->message.data.datasave.icon != -1)     return 0;
  if (!XUtil_TaskIs(r->r[2], "Pinboard"))          return 0;  // Not on the Pinboard.

  PinSave_Activated = TRUE;

  sprintf(expandedPath, "%s.%s", getenv("Wimp$ScrapDir"), block->message.data.datasave.leafname);

  // Rewrite <Wimp$Scrap>
  regs.r[0] = (int)"Wimp$Scrap";
  regs.r[1] = (int)expandedPath;
  regs.r[2] = strlen(expandedPath);
  regs.r[3] = 0;
  regs.r[4] = 4;
  anError   = _kernel_swi(0x20024, &regs, &regs);

  // Send save ack message
  message.header.size                   = 60;
  message.header.sender                 = d->task;
  message.header.yourref                = block->message.header.myref;
  message.header.action                 = message_DATASAVEACK;
  message.data.datasaveack.window       = block->message.data.datasave.window;
  message.data.datasaveack.icon         = block->message.data.datasave.icon;
  message.data.datasaveack.pos.x        = block->message.data.datasave.pos.x;
  message.data.datasaveack.pos.y        = block->message.data.datasave.pos.y;
  message.data.datasaveack.estsize      = -1;
  message.data.datasaveack.filetype     = block->message.data.datasave.filetype;
  strcpy(message.data.datasaveack.filename, "<Wimp$Scrap>");
  message.data.datasaveack.filename[12] = 0;
  Wimp_SendMessage(event_USERMESSAGE, &message, block->message.header.sender, 0);

  // Send saved message
  message.header.action                 = message_DATASAVED;
  Wimp_SendMessage(event_USERMESSAGE, &message, block->message.header.sender, 0);

  r->r[0] = -1;


  return -1;
}


/*
--------------------------------------------------------------------------------
   Procedure : MDFilters_PinSave_DataLoad
   Purpose   :
   Status    : Implementation (V1.0.0)
   V1.0.0    : 15/05/2002 - Preliminary implementation.
   Notes     :
--------------------------------------------------------------------------------
*/
int MDFilters_PinSave_DataLoad(event_data *block, _kernel_swi_regs *r)
{
  message_block  message;


  if (block->message.data.datasave.icon != -1)                             return 0;
  if (strcmp(block->message.data.dataload.filename, "<Wimp$Scrap>") != 0)  return 0;
  if (!PinSave_Activated)                                                  return 0;

  PinSave_Activated = FALSE;

  // Send a 'dataload'-ack message
  message.header.sender   = d->task;
  message.header.size     = 60;
  message.header.action   = message_DATALOADACK;
  message.header.yourref  = block->message.header.myref;
  Wimp_SendMessage (event_USERMESSAGERECORDED, &message, block->message.header.sender, 0);

  message.header.size         = sizeof(message);
  message.header.sender       = d->task;
  message.header.myref        = NULL;
  message.header.yourref      = NULL;
  message.header.action       = (message_action)MDMsg_PinboardSave;
  message.data.dataload.pos.x = block->message.data.dataload.pos.x;
  message.data.dataload.pos.y = block->message.data.dataload.pos.y;
  strcpy(message.data.dataload.filename, block->message.data.dataload.filename);
  Wimp_SendMessage (event_USERMESSAGE, &message, d->task, 0);

  r->r[0] = -1;  // Claim event


  return -1;
}


/*
--------------------------------------------------------------------------------
   Procedure : MDFilters_PinSave_Click
   Purpose   :
   Status    : Implementation (V1.0.0)
   V1.0.0    : 15/05/2002 - Preliminary implementation.
   Notes     : I REALLY HAVE NO IDEA WHAT THIS CODE IS USED FOR!!!!!!!!!!!!!!!!!
--------------------------------------------------------------------------------
*/
int MD_PinSave_Click(event_data *block, _kernel_swi_regs *r)
{
  message_block  message;


  if (!block->mouse.button.data.adjust)    return 0;  // Not a select click
  if (block->mouse.icon <= 0)              return 0;  // Not a title bar click
  if (!XUtil_TaskIs(r->r[2], "Pinboard"))  return 0;  // Not on pinboard

  message.header.sender  = d->task;
  message.header.myref   = NULL;
  message.header.yourref = NULL;
  message.header.action  = (message_action)MDMsg_ShowShortcut;
  message.header.size    = sizeof(message);

  strcpy(message.data.bytes, MDCfg->shortcut.shortcutMenu);

  Wimp_SendMessage(event_SEND, &message, d->task, NULL);

  r->r[0] = -1;  // Claim event


  return -1;
}


/*
--------------------------------------------------------------------------------
   Procedure : MD_PinSave_Filter
   Purpose   : Main WIMP Filter entry point.
   Status    : Implementation (V1.1.0)
   V1.1.0    : 20/06/2004 - Bugfix - Now supports programs which use non-
                                     recorded messages for data saving.
   V1.0.0    : 15/05/2002 - Preliminary implementation.
   Notes     : For some unusual reason, some saves are performed as recorded
               messages, whilst others aren't!
--------------------------------------------------------------------------------
*/
int MD_PinSave_Filter(event_data *block, _kernel_swi_regs *r)
{
  if (MDCfg->filters.pinSave != 0)  return 0;  // pinboard save disabled

  switch (r->r[0])
  {
    case event_CLICK:
      return MD_PinSave_Click(block, r);

    case event_USERMESSAGERECORDED:
      switch (block->message.header.action)
      {
        case message_DATALOAD:
          return MDFilters_PinSave_DataLoad(block, r);

        case message_DATASAVE:
          return MDFilters_PinSave_DataSave(block, r);

        default:
          return 0;  // Message not claimed.
      }
      break;

    case event_SEND:
      if (block->message.header.action == message_DATASAVE)
        return MDFilters_PinSave_DataSave(block, r);
      else
        return 0;

    default:
      return 0;  // Event not claimed.
  }
}



#ifdef __cplusplus
   }
#endif



/*
--------------------------------------------------------------------------------

   $Log: pinsave.cpp,v $
   Revision 1.3  2004/04/14 14:44:14  jtemple
   General check-in of additions / changes prior to an initial beta
   release of MiniDisc version 0.61.

   Revision 1.2  2003/09/13 23:52:00  jtemple
   Tidied comments.
   Replaced Mem_ function calls with malloc/free.


--------------------------------------------------------------------------------
*/




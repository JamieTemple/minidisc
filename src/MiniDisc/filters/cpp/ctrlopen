/*
--------------------------------------------------------------------------------

   $Source: /ADFS::4/\044/Shared/unix/cvs/minidisc/Sourcecode/MiniDisc/filters/ctrlopen.cpp,v $

   $Revision: 1.6 $
   $Date: 2004/04/17 14:56:31 $

   Manage interception of CTRL presses over filer windows.

--------------------------------------------------------------------------------
*/



/*
--------------------------------------------------------------------------------
   Includes
--------------------------------------------------------------------------------
*/
#include "shared/global.h"

#ifdef __cplusplus
   extern "C" {
#endif

#include "shared/utilities.h"

#include "minidisc/core/ModHdr.h"
#include "minidisc/core/dirmenu.h"
#include "minidisc/core/Menu.h"

#include "DeskLib:SWI.h"
#include "DeskLib:Menu.h"
#include "DeskLib:Wimp.h"
#include "DeskLib:Window.h"
#include "DeskLib:WimpMsg.h"
#include "DeskLib:WimpSWIs.h"



/*
--------------------------------------------------------------------------------
   (Local) Global Variables
--------------------------------------------------------------------------------
*/
static int  Filters_ctrlPressed = 0;
static char results[1024];
static int  fow_callback = 0;


/*
--------------------------------------------------------------------------------
   Procedure : MD_CtrlOpenDir_Message
   Purpose   :
   Status    : Development.
   Notes     :
--------------------------------------------------------------------------------
*/
BOOL MD_CtrlOpenDir_Message (event_pollblock *event, void *reference)
{
  char lala[2048];


  db->fn_begin();

  sprintf(lala, "filer_opendir %s", results);
  _kernel_oscli(lala);

  db->fn_end();

  UNUSED(event);
  UNUSED(reference);


  return TRUE;
}

/*
--------------------------------------------------------------------------------
   Procedure : Filters__OpenDir
   Purpose   :
   Status    : Development.
   Notes     :
--------------------------------------------------------------------------------
*/
_kernel_oserror *Filters__OpenDir(_kernel_swi_regs *r, void *pw)
{
  db->disabled();
  db->fn_begin();

  if (XUtil_FileIsDirectory(results))
    WimpMsg_SendTask(event_SEND, (message_action)MDMsg_CtrlOpenDir, NULL, 0, d->task);

  db->fn_end();
  db->enabled();

  UNUSED(r);
  UNUSED(pw);


  return NULL;
}


/*
--------------------------------------------------------------------------------
   Procedure : Filters__FilerPlot
   Purpose   :
   Status    : Development.
   Notes     : WIMPSWIVe handler for intercepting 'WIMP_PlotIcon' SWI calls.
               If we've already found that the mouse was over a filer window,
               and a mouse button was pressed when Ctrl was hit, then here we
               set-up a callback to 'Filters__CtrlOpen'.

               Note: I've disabled the function entry / exit code, because
               this function is called every time the filer tries to plot an
               icon, we want to try to keep this code running as quickly as is
               possible.  ;-)
--------------------------------------------------------------------------------
*/
_kernel_oserror *Filters__FilerPlot(_kernel_swi_regs *r, void *pw)
{
  icon_block *ib = (icon_block *)r->r[1];


  db->disabled();
  db->fn_begin();

  if (Filters_ctrlPressed == 1)
  {
    strcat(results, ".");
    if (ib->flags.data.indirected)
      strcat(results, ib->data.indirecttext.buffer);
    else
      strcat(results, ib->data.text);

    db->enabled();
    db->tracef(100, "About to force open directory : %s", results);
    db->disabled();

    XUtil_AddCallBack(Filters__OpenDir_callback, pw);

    Filters_ctrlPressed = 0;
  }

  UNUSED(r);
  UNUSED(pw);

  db->fn_end();
  db->enabled();


  return NULL;
}


/*
--------------------------------------------------------------------------------
   Procedure : MD_CtrlOpen_Message
   Purpose   : Respond to a WIMP message that CTRL has been pressed.
   Status    : Implementation (V1.0.0)
   V1.0.0    : 03/08/2003 - Preliminary implementation.
   Notes     :
--------------------------------------------------------------------------------
*/
BOOL MD_CtrlOpen_Message (event_pollblock *event, void *reference)
{
  task_handle        taskHandle;
  window_redrawblock rb;
  mouse_block        ptr;
  window_info        aWindow;


  db->disabled();
  db->fn_begin();

  Wimp_GetPointerInfo (&ptr);

  if (ptr.button.data.select || ptr.button.data.adjust)             // Only if Select or Adjust is held down.
  {
    Window_GetInfo3 (ptr.window, &aWindow);                         // Read details of window

    taskHandle = WimpMsg_GetTaskHandle(ptr.window, ptr.icon);       // Read the task handle of that window.

    if (strcmp(XUtil_TaskGetName(taskHandle), "Filer") == 0)
    {
      if (aWindow.block.titleflags.data.indirected)
        XUtil_ReadAppMemory(taskHandle, aWindow.block.title.indirecttext.buffer, results, 1024);
      else
        strcpy(results, aWindow.block.title.text);

      Filters_ctrlPressed = 1;

      rb.window     = -1;
      rb.rect.min.x = ptr.pos.x;
      rb.rect.min.y = ptr.pos.y;
      rb.rect.max.x = ptr.pos.x + 2;
      rb.rect.max.y = ptr.pos.y + 2;
      Wimp_ForceRedraw(&rb);
    }
  }

  fow_callback = 0;

  UNUSED(event);
  UNUSED(reference);

  db->fn_end();
  db->enabled();


  return TRUE;
}



/*
--------------------------------------------------------------------------------
   Procedure : Filters__CtrlOpen
   Purpose   :
   Status    : Implementation (V1.0.0)
   V1.0.0    : 03/08/2003 - Preliminary implementation.
   Notes     : Callback function, called from our central event handler when
               it intercepts a left Ctrl key press.  Sends an UNOFFICIAL
               message to the MiniDisc WIMP app. which checks further to see
               if we're holding a mouse button down over a filer window at the
               same time.
--------------------------------------------------------------------------------
*/
_kernel_oserror *Filters__CtrlOpen(_kernel_swi_regs *r, void *pw)
{
  db->disabled();
  db->fn_begin();

  WimpMsg_SendTask(event_SEND, (message_action)MDMsg_CtrlOpen, NULL, 0, d->task);

  UNUSED(r);
  UNUSED(pw);

  db->fn_end();
  db->enabled();


  return NULL;
}


/*
--------------------------------------------------------------------------------
   Procedure : MD_CtrlOpen_Event
   Purpose   : Sets up a callback if someone just pressed the left Ctrl key.
   Status    : Implementation (V1.0.0)
   V1.0.0    : 05/08/2003 - Preliminary implementation.
   Notes     :
--------------------------------------------------------------------------------
*/
int MD_CtrlOpen_Event(_kernel_swi_regs *r, void *pw)
{
  if (MDCfg->filters.filerOpen != 0)  return 1;  // Filter disabled;
  if (r->r[1] != 1)                   return 1;  // Only process key up events
  if (r->r[2] != 0x03b)               return 1;  // Not (left) ctrl pressed.
  if (fow_callback != 0)              return 1;  // Callback already in place.

  fow_callback = 1;

  XUtil_AddCallBack(Filters__CtrlOpen_callback, pw);


  return 1;  // Exit, but pass on keypress
}



#ifdef __cplusplus
   }
#endif



/*
--------------------------------------------------------------------------------

   $Log: ctrlopen.cpp,v $
   Revision 1.6  2004/04/17 14:56:31  jtemple
   Ensured directory opener only functioned when option enabled.
   Fixed task name reading in filter manager core.
   Added option to enable / disable task switcher, added Shift support.

   Revision 1.5  2004/04/14 14:44:12  jtemple
   General check-in of additions / changes prior to an initial beta
   release of MiniDisc version 0.61.

   Revision 1.4  2003/09/13 20:29:18  jtemple
   disabled debugging code during callbacks.

   Revision 1.3  2003/08/29 19:50:29  jtemple
   debugging calls extened (a bit), nothing more.

   Revision 1.2  2003/08/14 19:39:38  jtemple
   code completed & tidied.


--------------------------------------------------------------------------------
*/



